{"ast":null,"code":"var _jsxFileName = \"/Users/lizhizhuo/Documents/GitHub/DSCI560_project/Lab7/well-map/src/MapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"ol/ol.css\";\nimport Map from \"ol/Map\";\nimport View from \"ol/View\";\nimport TileLayer from \"ol/layer/Tile\";\nimport OSM from \"ol/source/OSM\";\nimport Feature from \"ol/Feature\";\nimport Point from \"ol/geom/Point\";\nimport { fromLonLat } from \"ol/proj\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport { Icon, Style } from \"ol/style\";\nimport Overlay from \"ol/Overlay\";\n\n// 🔹 Firebase REST API URL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FIREBASE_URL = \"https://wellmap-91f48-default-rtdb.firebaseio.com/.json\";\nconst MapComponent = () => {\n  _s();\n  const [wells, setWells] = useState([]);\n\n  // 🔹 从 Firebase 获取数据\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(FIREBASE_URL);\n        const data = await response.json();\n        if (data) {\n          // 🔹 Firebase 返回的是对象，需要转换成数组\n          const wellsArray = Object.values(data).map((well, index) => ({\n            id: well.id || index,\n            // 确保每个点都有唯一 ID\n            name: well.name || \"Unknown Well\",\n            lat: well.latitude || 0,\n            // 井的纬度\n            lon: well.longitude || 0,\n            // 井的经度\n            details: `\n              <strong>Formation:</strong> ${well.stimulated_formation || \"N/A\"}<br/>\n              <strong>Top Depth:</strong> ${well[\"top_(ft)\"] || \"N/A\"} ft<br/>\n              <strong>Bottom Depth:</strong> ${well[\"bottom_(ft)\"] || \"N/A\"} ft<br/>\n              <strong>Stages:</strong> ${well.stimulation_stages || \"N/A\"}<br/>\n              <strong>Volume:</strong> ${well.volume || \"N/A\"} ${well.volume_units || \"\"}<br/>\n              <strong>Details:</strong> ${well.details || \"No details\"}\n            `\n          }));\n          setWells(wellsArray);\n        }\n      } catch (error) {\n        console.error(\"获取数据失败:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // 🔹 加载 OpenLayers 地图\n  useEffect(() => {\n    if (wells.length === 0) return;\n    const map = new Map({\n      target: \"map\",\n      layers: [new TileLayer({\n        source: new OSM()\n      })],\n      view: new View({\n        center: fromLonLat([-99.1332, 39.8283]),\n        // 默认美国中部\n        zoom: 4\n      })\n    });\n\n    // 🔹 创建推针 (markers)\n    const features = wells.map(well => {\n      if (!well.lon || !well.lat) return null; // 确保经纬度存在\n      const feature = new Feature({\n        geometry: new Point(fromLonLat([parseFloat(well.lon), parseFloat(well.lat)])),\n        name: well.name,\n        details: well.details || \"暂无详细信息\"\n      });\n      feature.setStyle(new Style({\n        image: new Icon({\n          src: \"https://openlayers.org/en/latest/examples/data/icon.png\",\n          scale: 0.05\n        })\n      }));\n      return feature;\n    }).filter(f => f !== null); // 过滤掉无效数据\n\n    // 🔹 创建图层\n    const vectorLayer = new VectorLayer({\n      source: new VectorSource({\n        features\n      })\n    });\n    map.addLayer(vectorLayer);\n\n    // 🔹 创建 popup\n    const container = document.getElementById(\"popup\");\n    const content = document.getElementById(\"popup-content\");\n    const closer = document.getElementById(\"popup-closer\");\n    const overlay = new Overlay({\n      element: container,\n      autoPan: true,\n      autoPanAnimation: {\n        duration: 250\n      }\n    });\n    map.addOverlay(overlay);\n    closer.onclick = function () {\n      overlay.setPosition(undefined);\n      closer.blur();\n      return false;\n    };\n\n    // 🔹 监听点击事件，显示 popup\n    map.on(\"singleclick\", function (evt) {\n      const feature = map.forEachFeatureAtPixel(evt.pixel, feature => feature);\n      if (feature) {\n        const coordinates = feature.getGeometry().getCoordinates();\n        content.innerHTML = `<h3>${feature.get(\"name\")}</h3><p>${feature.get(\"details\")}</p>`;\n        overlay.setPosition(coordinates);\n      }\n    });\n    return () => map.setTarget(undefined);\n  }, [wells]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        width: \"100%\",\n        height: \"500px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"popup\",\n      className: \"ol-popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"#\",\n        id: \"popup-closer\",\n        className: \"ol-popup-closer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"popup-content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n_s(MapComponent, \"MEpWg2TJy5guHfnfH6e2W4hiNes=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useState","Map","View","TileLayer","OSM","Feature","Point","fromLonLat","VectorLayer","VectorSource","Icon","Style","Overlay","jsxDEV","_jsxDEV","FIREBASE_URL","MapComponent","_s","wells","setWells","fetchData","response","fetch","data","json","wellsArray","Object","values","map","well","index","id","name","lat","latitude","lon","longitude","details","stimulated_formation","stimulation_stages","volume","volume_units","error","console","length","target","layers","source","view","center","zoom","features","feature","geometry","parseFloat","setStyle","image","src","scale","filter","f","vectorLayer","addLayer","container","document","getElementById","content","closer","overlay","element","autoPan","autoPanAnimation","duration","addOverlay","onclick","setPosition","undefined","blur","on","evt","forEachFeatureAtPixel","pixel","coordinates","getGeometry","getCoordinates","innerHTML","get","setTarget","children","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","className","href","_c","$RefreshReg$"],"sources":["/Users/lizhizhuo/Documents/GitHub/DSCI560_project/Lab7/well-map/src/MapComponent.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"ol/ol.css\";\nimport Map from \"ol/Map\";\nimport View from \"ol/View\";\nimport TileLayer from \"ol/layer/Tile\";\nimport OSM from \"ol/source/OSM\";\nimport Feature from \"ol/Feature\";\nimport Point from \"ol/geom/Point\";\nimport { fromLonLat } from \"ol/proj\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport { Icon, Style } from \"ol/style\";\nimport Overlay from \"ol/Overlay\";\n\n// 🔹 Firebase REST API URL\nconst FIREBASE_URL = \"https://wellmap-91f48-default-rtdb.firebaseio.com/.json\";\n\nconst MapComponent = () => {\n  const [wells, setWells] = useState([]);\n\n  // 🔹 从 Firebase 获取数据\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(FIREBASE_URL);\n        const data = await response.json();\n\n        if (data) {\n          // 🔹 Firebase 返回的是对象，需要转换成数组\n          const wellsArray = Object.values(data).map((well, index) => ({\n            id: well.id || index, // 确保每个点都有唯一 ID\n            name: well.name || \"Unknown Well\",\n            lat: well.latitude || 0, // 井的纬度\n            lon: well.longitude || 0, // 井的经度\n            details: `\n              <strong>Formation:</strong> ${well.stimulated_formation || \"N/A\"}<br/>\n              <strong>Top Depth:</strong> ${well[\"top_(ft)\"] || \"N/A\"} ft<br/>\n              <strong>Bottom Depth:</strong> ${well[\"bottom_(ft)\"] || \"N/A\"} ft<br/>\n              <strong>Stages:</strong> ${well.stimulation_stages || \"N/A\"}<br/>\n              <strong>Volume:</strong> ${well.volume || \"N/A\"} ${well.volume_units || \"\"}<br/>\n              <strong>Details:</strong> ${well.details || \"No details\"}\n            `,\n          }));\n\n          setWells(wellsArray);\n        }\n      } catch (error) {\n        console.error(\"获取数据失败:\", error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // 🔹 加载 OpenLayers 地图\n  useEffect(() => {\n    if (wells.length === 0) return;\n\n    const map = new Map({\n      target: \"map\",\n      layers: [\n        new TileLayer({\n          source: new OSM(),\n        }),\n      ],\n      view: new View({\n        center: fromLonLat([-99.1332, 39.8283]), // 默认美国中部\n        zoom: 4,\n      }),\n    });\n\n    // 🔹 创建推针 (markers)\n    const features = wells.map((well) => {\n      if (!well.lon || !well.lat) return null; // 确保经纬度存在\n      const feature = new Feature({\n        geometry: new Point(fromLonLat([parseFloat(well.lon), parseFloat(well.lat)])),\n        name: well.name,\n        details: well.details || \"暂无详细信息\",\n      });\n\n      feature.setStyle(\n        new Style({\n          image: new Icon({\n            src: \"https://openlayers.org/en/latest/examples/data/icon.png\",\n            scale: 0.05,\n          }),\n        })\n      );\n\n      return feature;\n    }).filter(f => f !== null); // 过滤掉无效数据\n\n    // 🔹 创建图层\n    const vectorLayer = new VectorLayer({\n      source: new VectorSource({ features }),\n    });\n\n    map.addLayer(vectorLayer);\n\n    // 🔹 创建 popup\n    const container = document.getElementById(\"popup\");\n    const content = document.getElementById(\"popup-content\");\n    const closer = document.getElementById(\"popup-closer\");\n\n    const overlay = new Overlay({\n      element: container,\n      autoPan: true,\n      autoPanAnimation: { duration: 250 },\n    });\n\n    map.addOverlay(overlay);\n\n    closer.onclick = function () {\n      overlay.setPosition(undefined);\n      closer.blur();\n      return false;\n    };\n\n    // 🔹 监听点击事件，显示 popup\n    map.on(\"singleclick\", function (evt) {\n      const feature = map.forEachFeatureAtPixel(evt.pixel, (feature) => feature);\n      if (feature) {\n        const coordinates = feature.getGeometry().getCoordinates();\n        content.innerHTML = `<h3>${feature.get(\"name\")}</h3><p>${feature.get(\"details\")}</p>`;\n        overlay.setPosition(coordinates);\n      }\n    });\n\n    return () => map.setTarget(undefined);\n  }, [wells]);\n\n  return (\n    <div>\n      <div id=\"map\" style={{ width: \"100%\", height: \"500px\" }}></div>\n      <div id=\"popup\" className=\"ol-popup\">\n        <a href=\"#\" id=\"popup-closer\" className=\"ol-popup-closer\"></a>\n        <div id=\"popup-content\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default MapComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}